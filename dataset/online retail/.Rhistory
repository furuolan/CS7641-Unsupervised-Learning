data1
library('survival')
plot(data1, exp)
plot(obs, exp)
dnorm(x)
data <-c(10  50  35  20  11  10	10  20	40  15  20  35  10  22  10  40  10  35  25  30  29  15)
data <-c(10, 50, 35, 20, 11, 10, 10, 20, 40, 15, 20, 35, 10, 22, 10, 40, 10, 35, 25, 30, 29,15)
mean(data)
sd(data)
stem(data)
A <- c(c(1,2), c(2, 3))
A
?sum
sd(sum_sample)
sd(sum_sample)
sd(sum_sample)
M <- 10000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
mean(sum_sample)
M <- 10000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
mean(sum_sample)
M <- 10000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
mean(sum_sample)
sd(sum_sample)
M <- 10000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
mean(sum_sample)
sd(sum_sample)
M <- 100000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
M <- 100000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
M <- 10000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
mean(sum_sample)
sd(sum_sample)
sd(sum_sample)
sd(sum_sample)
source('~/Desktop/Q1.R')
source('~/Desktop/Q1.R')
M <- 10000
count <- 0
sum_sample <- NULL
repeat{
sum_sample <- c(sum(rbinom(12, 1, 0.58)), sum_sample)
count <- count + 1
if (count > M){break}
}
mean(sum_sample)
sd(sum_sample)
sd(sum_sample)
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
search()
f(3)
source('~/Documents/Courses/Coursera/R programming/lex&dyn_scoping.R')
f(3)
y <- 10
f <- function(x){
y <- 2
y^2 + g(x)
}
g <- function(x){
x*y
}
f(3)
g(3)
source('~/Documents/Courses/Coursera/R programming/lex&dyn_scoping.R')
f(3)
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
unclass(p)
names(unclass(p))
p$zone
weekdays(x)
months(x)
p$sec
unclass(x)
type(x)
typeof(x)
datestring <- c("January 10", 2012 10:40","December 9, 2011 9:10"")
datestring <- c("January 10, 2012 10:40","December 9, 2011 9:10"")
datestring <- c("January 10, 2012 10:40","December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
x, y <- strptime(datestring, "%B %d, %Y %H:%M")
x[0]
x[1]
x[2]
x[1]-x[2]
as.Date(x[1])-as.Date(x[2])
as.POSIXct(x[1])-as.POSIXct(x[2])
as.POSIXlt(x[1])-as.POSIXlt(x[2])
as.Weekdays(x[1])-as.Weekdays(x[2])
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- 1:4
lapply(x, runif, min = 0, max = 10)
lapply(x, runif, min = 0, max = 1)
lapply(x, runif, min = 0, max = 100)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 2, 3))
x
lapply(x, function(elt) elt[,1])//extract the first row of each matrix
lapply(x, function(elt) elt[,1])
lapply(x, function(elt) elt[1,])
lapply(x, function(elt){elt[1,]})
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x,31, sum)
apply(x, 1, sum)
apply(x, 1, quantile, prob = (0.25, 0.75))
apply(x, 1, quantile, probs = (0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
apply(x, c(2, 2), mean)
apply(x, c(1, 2), mean)
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
?factor
y <- data.frame(a = 1, b = "a")
y
dput(y)
dput(y, file = y.R)
x <- factor('yes', 'yes', 'yes', 'no', 'no')
x <- factor(c('yes', 'yes', 'yes', 'no', 'no'))
x
table(x)
unclass(x)
x <- factor(c('yes', 'yes', 'yes', 'no', 'no'), levels = c('yes', 'no')
)
x
x <- data.frame(foo = c(1, 2, 3, 4), bar = c(T, T, F, F))
x
swirl()
library(swirl)
rm(list=ls())
swirl()
my_vector <- vector(1:20)
my_vector <- vector(c(1:20)
)
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
z
0
main()
x <- c('a', 'c', 'c', 't', 'g')
u <- x > a
u <- x > 'a'
u
x[x > 'a']
x[u]
?gaussian
?gau
?gaus
?norm
?pnorm
?norm
?rnorm
pnorm(2, mean = 2, sd = 4)
library(swirl)
swirl()
browseVignettes("mzID")
library(mzID)
mzResults <- mzID(/Users/Jphild/Documents/Workspace/python/mzID/TCGA_24-1105_29-1785_24-2290_117C_W_PNNL_B5S4_f01.mzid)
mzResults <- mzID('/Users/Jphild/Documents/Workspace/python/mzID/TCGA_24-1105_29-1785_24-2290_117C_W_PNNL_B5S4_f01.mzid')
flatten(mzResults)
flatResults <- flatten(mzResults)
names(flatResults)
?names
mzResults("spectrumid")
mzResults$spectrumid
mzResults.spectrumid
flatResults$spectrumid
flatResults$rank
flatResults$spectrumid
install.packages('xlxs')
install.packages("xlxs")
install.packages("xslx")
install.packages("xlsx")
mzResults <- mzID('/Users/Jphild/Documents/Workspace/python/mzID/TCGA_24-1105_29-1785_24-2290_117C_W_PNNL_B5S4_f01.mzid')
library('mzID')
mzResults <- mzID('/Users/Jphild/Documents/Workspace/python/mzID/TCGA_24-1105_29-1785_24-2290_117C_W_PNNL_B5S4_f01.mzid')
length(mzResults)
flat <- flatten(mzResults)
flat
name(flat)
names(flat)
?flatten
??flatten
?flatten
flat$idFile
flat$accession
flat[1]
flat[,1]
flat[][1]
type(falt)
matrix(falt)
matrix <- mmatrix(flat)
matrix <- matrix(flat)
matrix
flat$databaseFile
flat$accession
flat$description
flat$modification
flat$modified
flat$databaseFile
flat$idFile
flat$spectrumFile
flat$idFile[1]
flat$spectrumFile[1]
seted(/Users/Jphild/Documents/Workspace/R)
seted("/Users/Jphild/Documents/Workspace/R")
setwd("/Users/Jphild/Documents/Workspace/R")
mzml.file='TCGA_24-1105_29-1785_24-2290_117C_W_PNNL_B5S4_f01.mzML'
mzid.file='TCGA_24-1105_29-1785_24-2290_117C_W_PNNL_B5S4_f01.mzid'
library(MSnbase)
read.gct <-
function (file) {
expr = read.table(file, skip = 2, header = TRUE, sep = "\t", quote = "")
rownames(expr) = expr[,1]
checkName = table(expr[,1])
if(max(checkName) > 1) {
stop(paste("Genes in gct file should be unique: ", names(which.max(checkName)), sep = " "))
}
expr = expr[,-c(1,2)]
expr = as.matrix(expr)
return(expr)
}
ccleRawData <- t(read.gct("https://data.broadinstitute.org/ccle/CCLE_RNAseq_081117.reads.gct"))
gene11 <- ccleRawData[1][1]
str(ccleRawData)
gene12 <- ccleRawData[1][2]
gene12 <- ccleRawData[1][3]
gene12 <- ccleRawData[2][1]
cor(gene11, gene12)
cov(gene11, gene12)
?scale()
str(ccleRawData)
install.packages("ReadAffy", repos = NULL, type="source")
install.packages("ReadAffy")
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
version
update()
updates()
installed.packages("forestplot")
instal.packages("forestplot")
install.packages("forestplot")
install.packages("haven")
library(forestplot)
install.packages("grid")
install.packages("grid")
library(forestplot)
library("haven")
FP <- read_csv("data.csv")
ped
pwd
cd
ced
cwd
getwd
getwd()
FP <- read_csv("data.csv")
?read_csv
read.csv2("data.csv")
FP <- read_csv("data.csv")2
FP <- read.csv2("data.csv")
attach(FP)
forestplot(as.matrix(FP[, 1:8]), HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50, 'mm'))
forestplot(as.matrix(FP[, 1:8]), HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50, 'mm'), lineheight="auto", boxsize=0, xticks=(c(0, 2, 4, 6, 8, 10)),col=fpColors(all.elements="black")
)
FP
FP <- read.csv2("data.csv", header=FALSE)
FP
forestplot(as.matrix(FP[, 1:8]), HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50, 'mm'), lineheight="auto", boxsize=0, xticks=(c(0, 2, 4, 6, 8, 10)),col=fpColors(all.elements="black"))
forestplot(as.matrix(FP[, 1:8]), HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50, 'mm'), lineheight="auto", boxsize=0, xticks=(c(0, 2, 4, 6, 8, 10)),col=fpColors(all.elements="black"))
as.matrix(FP[, 1:8])
FP[, 1:8]
FP[1:8]
as.matrix(FP[1:8])
as.matrix(FP)
mx = as.matrix(FP)
mx
mx[1:8]
mx[,1:8]
forestplot(as.matrix(FP[1:8]), HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50, 'mm'), lineheight="auto", boxsize=0, xticks=(c(0, 2, 4, 6, 8, 10)),col=fpColors(all.elements="black"))
forestplot(mx[1:8], HR, LowerCI, UpperCI, graph.pos=2, zero=1, graphwidth=unit(50, 'mm'), lineheight="auto", boxsize=0, xticks=(c(0, 2, 4, 6, 8, 10)),col=fpColors(all.elements="black"))
forestplot(mx[1:8], H-M, Fixed, 95%CI, graph.pos=2, zero=1, graphwidth=unit(50, 'mm'), lineheight="auto", boxsize=0, xticks=(c(0, 2, 4, 6, 8, 10)),col=fpColors(all.elements="black"))
mx[1]
mx[:1]
mx[,1]
mx[;1]
mx["M-H"]
mx[, 2:2]
mx[, 2]
mx[, ]
df = as.data.frame(mx)
df
FP <- read.csv2("data.csv")
df = as.data.frame(FP)
df
df["Group"]
as.matrix(FP, header=FALSE)
mx = as.matrix(FP, header=FALSE)
mx
mx["Group"]
mx[1]
mx[0]
mx[1:3]
FP <- read.csv2("data.csv")
FP <- read.csv2("data.csv", header=TRUE)
FP
FP["Group"]
mx = as.matrix(FP)
mx
mx["Group"]
mx["Group", 1]
mx["Total_curcumin"]
t1 <- read.csv2("data.csv")
t1
dim(t1)
t1[1]
t1[2]
df = as.data.frame(t1)
df
dim(df)
pwd
cd
getwd()
setwd("/Users/Jphild/Documents/Courses")
setwd("./Georgia Tech")
setwd("./Machine Learning/Assignment 3/dataset/mice protein")
setwd("./Machine Learning/Assignment 3/dataset/")
setwd("./Machine Learning/Assignment 3")
setwd("./datasets/mice protein")
mydata = read.csv("Data_Cortex_Nuclear.csv")
mydata = read.csv("Data_Cortex_Nuclear.csv", header=TRUE)
library("foreign")
write.arff(x =mydata ,file= "train.arff")
setwd("/Users/Jphild/Documents/Courses/Georgia Tech/Machine Learning/Assignment 3/dataset/online retail")
setwd("/Users/Jphild/Documents/Courses/Georgia Tech/Machine Learning/Assignment 3/datasets/online retail")
mydata = read.csv("Online Retail.csv")
mydata = read.csv("Online Retail.csv", header=TRUE)
write.arff(x =mydata ,file= "online_retail.arff")
